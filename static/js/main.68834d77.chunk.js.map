{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardsList.js","components/Scrollable.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","searchfield","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","id","name","email","src","concat","alt","CardsList","cardsArray","robots","map","item","components_Card","key","Scrollable","props","style","overflow","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","errorInfo","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this3","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scrollable","components_ErrorBoundry","components_CardsList","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68834d77.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                type=\"search\"\r\n                placeholder=\"Search...\"\r\n                className=\"pa3 ba b--green bg-light-blue\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardsList = ({robots}) => {\r\n\r\n    const cardsArray = robots.map((item) => {\r\n        return (\r\n            <Card\r\n                id={item.id}\r\n                name={item.name}\r\n                email={item.email}\r\n                key={item.id}\r\n            />\r\n        )\r\n    });\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardsList;","import React from 'react';\r\n\r\nconst Scrollable = (props) => {\r\n  return (\r\n      <div style={{overflow: 'scroll', height: '800px'}}>\r\n        {props.children}\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default Scrollable;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if(this.setState.hasError){\r\n            return <h1>OOPS! SOMETHING WENT WRONG.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardsList from '../components/CardsList';\r\nimport Scrollable from '../components/Scrollable';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({\r\n            searchfield: event.target.value\r\n        });\r\n    };\r\n\r\n    render(){\r\n\r\n        const { robots, searchfield } = this.state;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n\r\n        if (!robots.length) {\r\n            return <h1>LOADING...</h1>\r\n        }\r\n\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">ROBOFRIENDS</h1>\r\n                <SearchBox searchChange={this.onSearchChange}\r\n                           searchfield={searchfield}/>\r\n                <Scrollable>\r\n                    <ErrorBoundry>\r\n                        <CardsList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scrollable>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}